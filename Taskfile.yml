# https://taskfile.dev

version: "3"
dotenv:
  - .env

tasks:
  default:
    desc: Run voxel demo app
    deps: [run]

  ios:run:
    desc: Build, install, and run on first connected iOS device
    cmds:
      - bash ./ios-src/ios_run.sh device

  ios:run:sim:
    desc: Build, boot/create simulator if needed, and run on iOS Simulator
    cmds:
      - bash ./ios-src/ios_run.sh sim

  ios:run:device:logs:
    desc: Build and run on device with log streaming
    cmds:
      - |
        # Get device UDID
        UDID=$(xcrun xctrace list devices 2>/dev/null | grep -v Simulator | grep -Eo '\([0-9A-F-]{36}\)' | head -n1 | tr -d '()')
        if [ -z "$UDID" ]; then
          echo "No iOS device found"
          exit 1
        fi
        # Build and run
        bash ./ios-src/ios_run.sh device &
        # Stream logs
        sleep 5
        xcrun devicectl device log stream --device "$UDID" | grep -E "(VoxelGame|vox)" --line-buffered

  ios:run:sim:logs:
    desc: Build and run on simulator with log streaming
    cmds:
      - |
        # Build and run
        bash ./ios-src/ios_run.sh sim &
        # Wait a bit for app to start
        sleep 10
        # Stream logs from booted simulator
        xcrun simctl spawn booted log stream --predicate 'processImagePath CONTAINS "VoxelGame"' --level debug

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -r build || true
      - cargo clean

  test:plugin:
    desc: Run bevy_voxel_plugin tests from workspace root with output
    dir: /Volumes/Archive2TB/_dev/bevister
    cmds:
      - CARGO_TERM_COLOR=always RUST_TEST_THREADS=1 cargo test --manifest-path /Volumes/Archive2TB/_dev/bevister/Cargo.toml -p bevy_voxel_plugin -- --nocapture

  test:all:
    desc: Run all workspace tests from workspace root
    dir: /Volumes/Archive2TB/_dev/bevister
    cmds:
      - CARGO_TERM_COLOR=always RUST_TEST_THREADS=1 cargo test --manifest-path /Volumes/Archive2TB/_dev/bevister/Cargo.toml --workspace --all-features -- --nocapture

  run:
    desc: Run voxel demo app (no diagnostics)
    dir: /Volumes/Archive2TB/_dev/bevister
    cmds:
      - cargo run -p voxel_demo_app --features debug_gizmos

  run:diag:
    desc: Run voxel demo app with diagnostics UI enabled
    dir: /Volumes/Archive2TB/_dev/bevister
    cmds:
      - cargo run -p voxel_demo_app --features diagnostics_ui

  run:debug:
    desc: Run voxel demo app in debug mode with diagnostics
    dir: /Volumes/Archive2TB/_dev/bevister
    cmds:
      - cargo run -p voxel_demo_app --features diagnostics_ui

  run:release:
    desc: Run voxel demo app in release mode (no diagnostics)
    dir: /Volumes/Archive2TB/_dev/bevister
    cmds:
      - cargo run -p voxel_demo_app --release

  run:release:diag:
    desc: Run voxel demo app in release mode with diagnostics
    dir: /Volumes/Archive2TB/_dev/bevister
    cmds:
      - cargo run -p voxel_demo_app --release --features diagnostics_ui

  web:build:
    desc: Build voxel_demo_app for WebAssembly (wasm32) with threads
    dir: /Volumes/Archive2TB/_dev/bevister/crates/voxel_demo_app
    cmds:
      - cargo build -Z build-std=std,panic_abort --target wasm32-unknown-unknown

  web:run:
    desc: Run voxel_demo_app for WebAssembly (multithread default) with auto-open browser
    dir: /Volumes/Archive2TB/_dev/bevister/crates/voxel_demo_app
    cmds:
      - command -v wasm-server-runner || cargo install wasm-server-runner --locked
      - cargo run -Z build-std=std,panic_abort --target wasm32-unknown-unknown -- --open

  web:run:st:
    desc: Run voxel_demo_app for WebAssembly single-thread fallback (sync mesh)
    dir: /Volumes/Archive2TB/_dev/bevister/crates/voxel_demo_app
    cmds:
      - command -v wasm-server-runner || cargo install wasm-server-runner --locked
      - cargo run -Z build-std=std,panic_abort --target wasm32-unknown-unknown --features bevy_voxel_plugin/wasm_sync_mesh -- --open
